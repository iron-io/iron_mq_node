// Generated by CoffeeScript 1.7.1
(function() {
  var Client, apiClient, _;

  _ = require('underscore');

  apiClient = require('./api_client');

  Client = (function() {
    function Client(options) {
      this.api = new apiClient.APIClient(options);
    }

    Client.prototype.queue = function(name) {
      return new Client(_.extend({}, this.api.options, {
        queue_name: name
      }));
    };

    Client.prototype.queues = function(options, cb) {
      return this.api.queuesList(options, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.info = function(cb) {
      return this.api.queuesGet(this.api.options.queue_name, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.clear = function(cb) {
      return this.api.queuesClear(this.api.options.queue_name, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.update = function(options, cb) {
      return this.api.queuesUpdate(this.api.options.queue_name, options, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.add_subscribers = function(subscribers, cb) {
      if (!(subscribers instanceof Array)) {
        subscribers = [subscribers];
      }
      return this.api.queuesAddSubscribers(this.api.options.queue_name, {
        subscribers: subscribers
      }, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.rm_subscribers = function(subscribers, cb) {
      if (!(subscribers instanceof Array)) {
        subscribers = [subscribers];
      }
      return this.api.queuesRemoveSubscribers(this.api.options.queue_name, {
        subscribers: subscribers
      }, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.del_queue = function(cb) {
      return this.api.queuesDelete(this.api.options.queue_name, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.post = function(messages, cb) {
      if (!(messages instanceof Array)) {
        messages = [messages];
      }
      messages = _.map(messages, function(message) {
        if (typeof message === 'string') {
          return {
            body: message
          };
        } else {
          return message;
        }
      });
      return this.api.messagesPost(this.api.options.queue_name, messages, function(error, body) {
        if (error == null) {
          return cb(error, messages.length === 1 ? body.ids[0] : body.ids);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.get = function(options, cb) {
      return this.get_n(options, function(error, body) {
        if (error == null) {
          return cb(error, (options.n == null) || options.n === 1 ? body[0] : body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.get_n = function(options, cb) {
      return this.api.messagesGet(this.api.options.queue_name, options, function(error, body) {
        if (error == null) {
          return cb(error, body.messages);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.peek = function(options, cb) {
      return this.peek_n(options, function(error, body) {
        if (error == null) {
          return cb(error, (options.n == null) || options.n === 1 ? body[0] : body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.peek_n = function(options, cb) {
      return this.api.messagesPeek(this.api.options.queue_name, options, function(error, body) {
        if (error == null) {
          return cb(error, body.messages);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.del = function(message_id, cb) {
      return this.api.messagesDelete(this.api.options.queue_name, message_id, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.del_multiple = function(messages_ids, cb) {
      return this.api.messagesMultipleDelete(this.api.options.queue_name, messages_ids, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.msg_get = function(message_id, cb) {
      return this.api.messagesGetById(this.api.options.queue_name, message_id, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.msg_touch = function(message_id, cb) {
      return this.api.messagesTouch(this.api.options.queue_name, message_id, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.msg_release = function(message_id, options, cb) {
      return this.api.messagesRelease(this.api.options.queue_name, message_id, options, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.msg_push_statuses = function(message_id, cb) {
      return this.api.messagesPushStatuses(this.api.options.queue_name, message_id, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    Client.prototype.del_msg_push_status = function(message_id, subscriber_id, cb) {
      return this.api.messagesPushStatusDelete(this.api.options.queue_name, message_id, subscriber_id, function(error, body) {
        if (error == null) {
          return cb(error, body);
        } else {
          return cb(error, body);
        }
      });
    };

    return Client;

  })();

  module.exports.Client = Client;

}).call(this);
