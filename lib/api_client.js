// Generated by CoffeeScript 1.9.3
(function() {
  var APIClient, _, ironCore, version,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('pkginfo')(module);

  version = this.version;

  _ = require('underscore');

  ironCore = require('iron_core');

  APIClient = (function(superClass) {
    extend(APIClient, superClass);

    APIClient.prototype.AWS_US_EAST_HOST = 'mq-aws-us-east-1-1.iron.io';

    function APIClient(options) {
      var defaultOptions;
      defaultOptions = {
        scheme: 'https',
        host: this.AWS_US_EAST_HOST,
        port: 443,
        api_version: 3,
        user_agent: version,
        queue_name: 'default'
      };
      APIClient.__super__.constructor.call(this, 'iron', 'mq', options, defaultOptions, ['project_id', 'token', 'api_version', 'queue_name']);
    }

    APIClient.prototype.version = function() {
      return "iron_mq_node-" + version + " (" + (APIClient.__super__.version.call(this)) + ")";
    };

    APIClient.prototype.url = function() {
      return APIClient.__super__.url.call(this) + this.options.api_version.toString() + ("/projects/" + this.options.project_id + "/queues");
    };

    APIClient.prototype.headers = function() {
      return _.extend({}, APIClient.__super__.headers.call(this), {
        'Authorization': "OAuth " + this.options.token
      });
    };

    APIClient.prototype.queuesList = function(options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("", options, function(error, response, body) {
        var e;
        try {
          body = JSON.parse(body);
          return parseResponseBind(error, response, body['queues'], cb);
        } catch (_error) {
          e = _error;
          return parseResponseBind(e, response, null, cb);
        }
      });
    };

    APIClient.prototype.queuesListWithStats = function(options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("?stats=true", options, function(error, response, body) {
        var e;
        try {
          body = JSON.parse(body);
          return parseResponseBind(error, response, body['queues'], cb);
        } catch (_error) {
          e = _error;
          return parseResponseBind(e, response, null, cb);
        }
      });
    };

    APIClient.prototype.queuesGet = function(queue_name, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("/" + queue_name, {}, function(error, response, body) {
        var e;
        try {
          body = JSON.parse(body);
          return parseResponseBind(error, response, body['queue'], cb);
        } catch (_error) {
          e = _error;
          return parseResponseBind(e, response, null, cb);
        }
      });
    };

    APIClient.prototype.queuesClear = function(queue_name, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this["delete"]("/" + queue_name + "/messages", {}, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.queuesCreate = function(queue_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.put("/" + queue_name, options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.queuesUpdate = function(queue_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.patch("/" + queue_name, options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.queuesAddSubscribers = function(queue_name, subscribers, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.post("/" + queue_name + "/subscribers", subscribers, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.queuesRemoveSubscribers = function(queue_name, subscribers, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this["delete"]("/" + queue_name + "/subscribers", subscribers, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.queuesReplaceSubscribers = function(queue_name, subscribers, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.put("/" + queue_name + "/subscribers", subscribers, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.queuesDelete = function(queue_name, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this["delete"]("/" + queue_name, {}, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.messagesPost = function(queue_name, messages, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.post("/" + queue_name + "/messages", {
        messages: messages
      }, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.messagesGet = function(queue_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.post("/" + queue_name + "/reservations", options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.messagesGetById = function(queue_name, message_id, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("/" + queue_name + "/messages/" + message_id, {}, function(error, response, body) {
        var e;
        try {
          body = JSON.parse(body);
          return parseResponseBind(error, response, body['message'], cb);
        } catch (_error) {
          e = _error;
          return parseResponseBind(e, response, null, cb);
        }
      });
    };

    APIClient.prototype.messagesDelete = function(queue_name, message_id, options, cb) {
      var body, parseResponseBind;
      body = _.pick(options, 'reservation_id', 'subscriber_name');
      parseResponseBind = _.bind(this.parseResponse, this);
      return this["delete"]("/" + queue_name + "/messages/" + message_id, body, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.messagesMultipleDelete = function(queue_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this["delete"]("/" + queue_name + "/messages", options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.messagesPeek = function(queue_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("/" + queue_name + "/messages", options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.messageTouch = function(queue_name, message_id, reservation_id, options, cb) {
      var body, parseResponseBind;
      body = _.pick(options, 'timeout');
      body['reservation_id'] = reservation_id;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.post("/" + queue_name + "/messages/" + message_id + "/touch", body, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.messageRelease = function(queue_name, message_id, reservation_id, options, cb) {
      var body, parseResponseBind;
      body = _.pick(options, 'delay');
      body['reservation_id'] = reservation_id;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.post("/" + queue_name + "/messages/" + message_id + "/release", body, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.messagesPushStatuses = function(queue_name, message_id, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("/" + queue_name + "/messages/" + message_id + "/subscribers", {}, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    return APIClient;

  })(ironCore.Client);

  module.exports.APIClient = APIClient;

}).call(this);
